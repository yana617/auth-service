openapi: 3.0.0
info:
  title: API
  version: 0.0.1
servers:
  - url: http://localhost:1081/
    description: Development
  - url: https://auth-service.dogcatbmpz.by/
    description: Production
tags:
- name: Auth
  description: Authorization
- name: Users
  description: All about users
- name: Permissions
  description: All about permissions
- name: Roles
  description: All about roles
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
      responses:
        '201':
          description: Test description
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/RegisterBody'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleErrors'
              examples:
                Client Error:
                  value:
                    success: false
                    error: 'User already exist'
                Validation Errors:
                  value:
                    success: false
                    errors: 
                      - value: ''
                        msg: Required
                        param: name
                        location: body
  /auth/login:
    post:
      summary: Login with existing user
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: You are successfully logged in
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Client error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Fields are required'
  /users/{userId}:
    get:
      summary: Get user information
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return [ONLY YOURS]"
        required: true
        type: string
      responses:
        '200':
          description: Returns user info
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '403':
          description: Forbidden error while trying to get someone else's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
    put:
      summary: Update user information (your own)
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to edit [ONLY YOURS]"
        required: true
        type: string
      responses:
        '200':
          description: Returns updated user info
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: validation errors because of invalid fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Forbidden error while trying to update someone else's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
  /users/{userId}/permissions:
    get:
      summary: Get user permissions
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who permissions to return"
        required: true
        type: string
      responses:
        '200':
          description: Returns user permissions
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      rolePermissions:
                        type: array
                        items:
                          type: string
                      additionalPermissions:
                        type: array
                        items:
                          type: string
        '403':
          description: Forbidden error when you don't have enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'User not found'
  /users/{userId}/role:
    put:
      summary: Update user role
      tags:
      - "Users"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to replace a role"
        required: true
        type: string
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Role field id required'
        '403':
          description: Forbidden error when you don't have enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'User not found'
  /permissions:
    get:
      summary: Get all permissions available to be additional
      tags:
      - "Permissions"
      responses:
        '200':
          description: Returns all permissions
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: string
        '403':
          description: Forbidden error when you don't have enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
    put:
      summary: Update user additional permissions
      tags:
      - "Permissions"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                permissions:
                  type: object
                  example:
                    EDIT_NOTICE: true
                    CREATE_NOTICE: false
      responses:
        '200':
          description: Permissions successfully updated
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Permissions field id required'
        '403':
          description: Forbidden error when you don't have enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'User not found'
  /roles:
    get:
      summary: Get all roles
      tags:
      - "Roles"
      responses:
        '200':
          description: Returns all roles
          content:
            application/json:
              schema: 
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: string
        '403':
          description: Forbidden error when you don't have enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: 'Forbidden'
components:
  schemas:
    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          default: false
        errors:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              msg:
                type: string
              param:
                type: string
              location: 
                type: string
    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        error:
          type: string
    MultipleErrors:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Error'
        - $ref: '#/components/schemas/ValidationError'
    User:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        phone:
          type: string
        email:
          type: string
    RegisterUserAdditionalField:
      type: object
      properties:
        additional_field_template_id:
          type: string
        value:
          type: boolean
    RegisterBody:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        phone:
          type: string
        email:
          type: string
        password:
          type: string
        additional_fields:
          type: array
          items:
            $ref: '#/components/schemas/RegisterUserAdditionalField'
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        phone:
          type: string
        email:
          type: string
        token:
          type: string